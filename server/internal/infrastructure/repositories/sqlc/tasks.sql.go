// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tasks.sql

package sqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (id, title)
VALUES ($1, $2)
RETURNING id, title, is_done, created_at, updated_at
`

type CreateTaskParams struct {
	ID    uuid.UUID
	Title string
}

type CreateTaskRow struct {
	ID        uuid.UUID
	Title     string
	IsDone    bool
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (CreateTaskRow, error) {
	row := q.db.QueryRowContext(ctx, createTask, arg.ID, arg.Title)
	var i CreateTaskRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.IsDone,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listActiveTasks = `-- name: ListActiveTasks :many
SELECT id, title, is_done, created_at, updated_at
FROM tasks
WHERE is_done = false AND deleted_at IS NULL
ORDER BY
    CASE WHEN $1 = 'asc' THEN created_at END ASC,
    CASE WHEN $1 = 'desc' THEN created_at END DESC
`

type ListActiveTasksRow struct {
	ID        uuid.UUID
	Title     string
	IsDone    bool
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) ListActiveTasks(ctx context.Context, sortOrder interface{}) ([]ListActiveTasksRow, error) {
	rows, err := q.db.QueryContext(ctx, listActiveTasks, sortOrder)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListActiveTasksRow
	for rows.Next() {
		var i ListActiveTasksRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.IsDone,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCompletedTasks = `-- name: ListCompletedTasks :many
SELECT id, title, is_done, created_at, updated_at
FROM tasks
WHERE is_done = true AND deleted_at IS NULL
ORDER BY
    CASE WHEN $1 = 'asc' THEN created_at END ASC,
    CASE WHEN $1 = 'desc' THEN created_at END DESC
`

type ListCompletedTasksRow struct {
	ID        uuid.UUID
	Title     string
	IsDone    bool
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) ListCompletedTasks(ctx context.Context, sortOrder interface{}) ([]ListCompletedTasksRow, error) {
	rows, err := q.db.QueryContext(ctx, listCompletedTasks, sortOrder)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListCompletedTasksRow
	for rows.Next() {
		var i ListCompletedTasksRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.IsDone,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDeletedTasks = `-- name: ListDeletedTasks :many
SELECT id, title, is_done, created_at, updated_at
FROM tasks
WHERE deleted_at IS NOT NULL
ORDER BY
    CASE WHEN $1 = 'asc' THEN created_at END ASC,
    CASE WHEN $1 = 'desc' THEN created_at END DESC
`

type ListDeletedTasksRow struct {
	ID        uuid.UUID
	Title     string
	IsDone    bool
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) ListDeletedTasks(ctx context.Context, sortOrder interface{}) ([]ListDeletedTasksRow, error) {
	rows, err := q.db.QueryContext(ctx, listDeletedTasks, sortOrder)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListDeletedTasksRow
	for rows.Next() {
		var i ListDeletedTasksRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.IsDone,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTasks = `-- name: ListTasks :many
SELECT id, title, is_done, created_at, updated_at
FROM tasks
WHERE deleted_at IS NULL
ORDER BY
    CASE WHEN $1 = 'asc' THEN created_at END ASC,
    CASE WHEN $1 = 'desc' THEN created_at END DESC
`

type ListTasksRow struct {
	ID        uuid.UUID
	Title     string
	IsDone    bool
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) ListTasks(ctx context.Context, sortOrder interface{}) ([]ListTasksRow, error) {
	rows, err := q.db.QueryContext(ctx, listTasks, sortOrder)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListTasksRow
	for rows.Next() {
		var i ListTasksRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.IsDone,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markTaskDone = `-- name: MarkTaskDone :exec
UPDATE tasks
SET is_done = true, updated_at = now()
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) MarkTaskDone(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, markTaskDone, id)
	return err
}

const markTaskUndone = `-- name: MarkTaskUndone :exec
UPDATE tasks
SET is_done = false, updated_at = now()
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) MarkTaskUndone(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, markTaskUndone, id)
	return err
}

const restoreDeletedTask = `-- name: RestoreDeletedTask :exec
UPDATE tasks
SET deleted_at = NULL, updated_at = now()
WHERE id = $1 AND deleted_at IS NOT NULL
`

func (q *Queries) RestoreDeletedTask(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, restoreDeletedTask, id)
	return err
}

const softDeleteTask = `-- name: SoftDeleteTask :exec
UPDATE tasks
SET deleted_at = now(), updated_at = now()
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) SoftDeleteTask(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, softDeleteTask, id)
	return err
}
