// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tasks.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (id, title, priority)
VALUES ($1, $2, $3)
    RETURNING id, title, priority, created_at, updated_at, completed_at, deleted_at
`

type CreateTaskParams struct {
	ID       uuid.UUID
	Title    string
	Priority int16
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask, arg.ID, arg.Title, arg.Priority)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Priority,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CompletedAt,
		&i.DeletedAt,
	)
	return i, err
}

const emptyTrash = `-- name: EmptyTrash :exec
DELETE FROM tasks
WHERE deleted_at IS NOT NULL
`

func (q *Queries) EmptyTrash(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, emptyTrash)
	return err
}

const hardDeleteTask = `-- name: HardDeleteTask :execrows
DELETE FROM tasks
WHERE id = $1 AND deleted_at IS NOT NULL
`

func (q *Queries) HardDeleteTask(ctx context.Context, id uuid.UUID) (int64, error) {
	result, err := q.db.ExecContext(ctx, hardDeleteTask, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const listCompletedTasks = `-- name: ListCompletedTasks :many
SELECT id, title, priority, created_at, updated_at, completed_at, deleted_at
FROM tasks
WHERE completed_at IS NOT NULL AND deleted_at IS NULL
ORDER BY
    CASE WHEN $1='priority'     AND $2='asc'  THEN priority     END ASC,
    CASE WHEN $1='priority'     AND $2='desc' THEN priority     END DESC,
    CASE WHEN $1='completed_at' AND $2='asc'  THEN completed_at END ASC,
    CASE WHEN $1='completed_at' AND $2='desc' THEN completed_at END DESC,
    id DESC
`

type ListCompletedTasksParams struct {
	SortBy    interface{}
	SortOrder interface{}
}

func (q *Queries) ListCompletedTasks(ctx context.Context, arg ListCompletedTasksParams) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listCompletedTasks, arg.SortBy, arg.SortOrder)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Priority,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CompletedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDeletedTasks = `-- name: ListDeletedTasks :many
SELECT id, title, priority, created_at, updated_at, completed_at, deleted_at
FROM tasks
WHERE deleted_at IS NOT NULL
ORDER BY
    CASE WHEN $1='priority'   AND $2='asc'  THEN priority   END ASC,
    CASE WHEN $1='priority'   AND $2='desc' THEN priority   END DESC,
    CASE WHEN $1='deleted_at' AND $2='asc'  THEN deleted_at END ASC,
    CASE WHEN $1='deleted_at' AND $2='desc' THEN deleted_at END DESC,
    id DESC
`

type ListDeletedTasksParams struct {
	SortBy    interface{}
	SortOrder interface{}
}

func (q *Queries) ListDeletedTasks(ctx context.Context, arg ListDeletedTasksParams) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listDeletedTasks, arg.SortBy, arg.SortOrder)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Priority,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CompletedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPendingTasks = `-- name: ListPendingTasks :many
SELECT id, title, priority, created_at, updated_at, completed_at, deleted_at
FROM tasks
WHERE completed_at IS NULL AND deleted_at IS NULL
ORDER BY
    CASE WHEN $1='priority'   AND $2='asc'  THEN priority   END ASC,
    CASE WHEN $1='priority'   AND $2='desc' THEN priority   END DESC,
    CASE WHEN $1='created_at' AND $2='asc'  THEN created_at END ASC,
    CASE WHEN $1='created_at' AND $2='desc' THEN created_at END DESC,
    id DESC
`

type ListPendingTasksParams struct {
	SortBy    interface{}
	SortOrder interface{}
}

func (q *Queries) ListPendingTasks(ctx context.Context, arg ListPendingTasksParams) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listPendingTasks, arg.SortBy, arg.SortOrder)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Priority,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CompletedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTasks = `-- name: ListTasks :many
SELECT id, title, priority, created_at, updated_at, completed_at, deleted_at
FROM tasks
WHERE deleted_at IS NULL
ORDER BY
    CASE WHEN $1='priority'   AND $2='asc'  THEN priority   END ASC,
    CASE WHEN $1='priority'   AND $2='desc' THEN priority   END DESC,
    CASE WHEN $1='created_at' AND $2='asc'  THEN created_at END ASC,
    CASE WHEN $1='created_at' AND $2='desc' THEN created_at END DESC,
    id DESC
`

type ListTasksParams struct {
	SortBy    interface{}
	SortOrder interface{}
}

func (q *Queries) ListTasks(ctx context.Context, arg ListTasksParams) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listTasks, arg.SortBy, arg.SortOrder)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Priority,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CompletedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markTaskDone = `-- name: MarkTaskDone :exec
UPDATE tasks
SET completed_at = now(), updated_at = now()
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) MarkTaskDone(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, markTaskDone, id)
	return err
}

const markTaskUndone = `-- name: MarkTaskUndone :exec
UPDATE tasks
SET completed_at = NULL, updated_at = now()
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) MarkTaskUndone(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, markTaskUndone, id)
	return err
}

const restoreDeletedTask = `-- name: RestoreDeletedTask :exec
UPDATE tasks
SET deleted_at = NULL, updated_at = now()
WHERE id = $1 AND deleted_at IS NOT NULL
`

func (q *Queries) RestoreDeletedTask(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, restoreDeletedTask, id)
	return err
}

const softDeleteTask = `-- name: SoftDeleteTask :exec
UPDATE tasks
SET deleted_at = now(), updated_at = now()
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) SoftDeleteTask(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, softDeleteTask, id)
	return err
}

const updateTaskPriority = `-- name: UpdateTaskPriority :exec
UPDATE tasks
SET priority = $2, updated_at = now()
WHERE id = $1 AND deleted_at IS NULL
`

type UpdateTaskPriorityParams struct {
	ID       uuid.UUID
	Priority int16
}

func (q *Queries) UpdateTaskPriority(ctx context.Context, arg UpdateTaskPriorityParams) error {
	_, err := q.db.ExecContext(ctx, updateTaskPriority, arg.ID, arg.Priority)
	return err
}
