import { useEffect, useState } from 'react';
import TaskList from '../components/TaskList';
import TaskFilters from '../components/TaskFilters';
import EmptyState from '../components/EmptyState';

export default function TrashPage({ tasks, loadTasks, onRestore, onHardDelete, onEmptyTrash }) {
    const [order, setOrder] = useState('desc');
    const [isClearing, setIsClearing] = useState(false);

    useEffect(() => {
        loadTasks('deleted', order);
    }, [order, loadTasks]);

    const handleRestore = async (task) => {
        await onRestore(task, 'deleted', order);
    };

    const handleEmptyTrash = async () => {
        if (!tasks.length) return;
        const ok = window.confirm('–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É? –≠—Ç–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ.');
        if (!ok) return;

        try {
            setIsClearing(true);
            await onEmptyTrash('deleted', order);
        } finally {
            setIsClearing(false);
        }
    };

    const isEmpty = tasks.length === 0;

    return (
        <>
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
            <div className="mb-4">
                <h1 className="text-xl sm:text-2xl font-bold text-gray-800 dark:text-gray-200">–ö–æ—Ä–∑–∏–Ω–∞</h1>

                {/* –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: –Ω–∞ –º–æ–±–∏–ª–µ –≤ —Å—Ç–æ–ª–±–∏–∫, –Ω–∞ sm+ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É */}
                <div className="mt-2 flex flex-col sm:flex-row sm:items-center sm:justify-between gap-2">
                    <TaskFilters
                        order={order}
                        setOrder={setOrder}
                        className="w-full sm:w-auto"
                    />

                    {/* –ö–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–¥–∞—á–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ */}
                    {!isEmpty && (
                        <button
                            type="button"
                            onClick={handleEmptyTrash}
                            disabled={isClearing}
                            className="
                w-full sm:w-auto
                inline-flex items-center justify-center gap-2 h-10 px-3 rounded-lg
                border border-red-300 dark:border-red-600
                text-red-600 dark:text-red-400
                hover:bg-red-50 dark:hover:bg-red-900/20 hover:border-red-500
                active:scale-[.98]
                disabled:opacity-50 disabled:cursor-not-allowed
                transition whitespace-nowrap
              "
                            aria-label="–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É"
                            title="–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"
                        >
                            <span className="text-lg">üßπ</span>
                            <span>–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É</span>
                        </button>
                    )}
                </div>
            </div>

            {/* –ö–æ–Ω—Ç–µ–Ω—Ç */}
            <div className="flex-1 flex">
                {isEmpty ? (
                    <div className="flex-1 grid place-items-center">
                        <EmptyState icon="üóëÔ∏è" message="–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –ü–æ–∫–∞ –Ω–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å!" />
                    </div>
                ) : (
                    <div className="w-full">
                        <TaskList
                            tasks={tasks}
                            isTrash
                            onRestore={handleRestore}
                            onHardDelete={(task) => onHardDelete(task, 'deleted', order)}
                        />
                    </div>
                )}
            </div>
        </>
    );
}
